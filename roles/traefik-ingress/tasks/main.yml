---
- name: traefik_ingress_controller | Getting node labels
  command: "kubectl get nodes -l role=ingress-controller"
  register: nodes
  when: inventory_hostname == groups["masters"][0]

- name: traefik_ingress_controller | Printing nodes
  debug: var=nodes
  when: inventory_hostname == groups["masters"][0]

- name: traefik_ingress_controller | Labelling proxy nodes with role=ingress_controller
  command: "kubectl label node {{ item }} role=ingress-controller"
  with_items:
    - "{{ groups['proxy'] }}"
  when:
    - inventory_hostname == groups["masters"][0]
    - '"{{ item }}" not in nodes.stdout'

- name: Installing python-passlib
  apt:
    name: python-passlib
    state: latest
    
- name: Creating htpasswd file
  htpasswd:
    path: /tmp/auth
    name: "{{ basic_auth_user }}"
    password: "{{ basic_auth_password }}"
  when:
    - inventory_hostname == groups["masters"][0]

- name: Getting secrets
  command: kubectl get secrets --namespace=kube-system
  register: secrets
  when:
    - inventory_hostname == groups["masters"][0]

- name: Creating secret
  command: kubectl create secret generic traefik-basic-auth --namespace=kube-system --from-file=/tmp/auth
  when:
    - inventory_hostname == groups["masters"][0]
    - '"traefik-basic-auth" not in secrets.stdout'

- name: Deleting basic_auth file
  file:
    path: /tmp/auth
    state: absent
  when: inventory_hostname == groups["masters"][0]


- name: traefik_ingress_controller | Templating manifests
  template:
    src: "{{ item }}"
    dest: "/tmp/{{ item | regex_replace('.j2', '') }}"
  with_items:
    - traefik-ingress-clusterolebinding.yml.j2
    - traefik-ingress-configmap.yml.j2
    - traefik-ingress-sa.yml.j2
    - traefik-ingress-clusterole.yml.j2
    - traefik-ingress-controller.yml.j2
    - traefik-ingress-service.yml.j2
    - traefik-ingress-dashboard-service.yml.j2
    - traefik-ingress-dashboard-ingress.yml.j2
  when: inventory_hostname == groups["masters"][0]

- name: traefik_ingress_controller | Deploy the traefik_ingress_controller
  kube:
    name: "{{ item.name }}"
    resource: "{{ item.type }}"
    filename: "{{ item.file }}"
    state: latest
  with_items:
    - { 'name': 'traefik-ingress-controller', 'type': 'clusterrolebinding', 'file': '/tmp/traefik-ingress-clusterolebinding.yml' }
    - { 'name': 'traefik-ingress-controller', 'type': 'clusterrole', 'file': '/tmp/traefik-ingress-clusterole.yml' }
    - { 'name': 'traefik-ingress-controller', 'type': 'sa', 'file': '/tmp/traefik-ingress-sa.yml' }
    - { 'name': 'traefik-ingress-cfg', 'type': 'configmap', 'file': '/tmp/traefik-ingress-configmap.yml' }
    - { 'name': 'traefik-ingress-controller', 'type': 'deploy', 'file': '/tmp/traefik-ingress-controller.yml' }
    - { 'name': 'traefik-ingress-service', 'type': 'svc', 'file': '/tmp/traefik-ingress-service.yml' }
    - { 'name': 'traefik-web-ui', 'type': 'svc', 'file': '/tmp/traefik-ingress-dashboard-service.yml' }
    - { 'name': 'traefik-web-ui', 'type': 'ingress', 'file': '/tmp/traefik-ingress-dashboard-ingress.yml' }
  when: inventory_hostname == groups["masters"][0]

- name: traefik_ingress_controller | Removing manifest
  file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items:
    - traefik-ingress-clusterolebinding.yml
    - traefik-ingress-configmap.yml
    - traefik-ingress-sa.yml
    - traefik-ingress-clusterole.yml
    - traefik-ingress-controller.yml
    - traefik-ingress-service.yml
    - traefik-ingress-dashboard-service.yml
    - traefik-ingress-dashboard-ingress.yml
  when: inventory_hostname == groups["masters"][0]

- name: traefik_ingress_controller | Creating directory for scaleway-ipmove
  file:
    path: /usr/local/bin/scaleway-ipmove
    state: directory
  when: "'proxy' in group_names"

- name: traefik_ingress_controller | Getting scaleway-ipmove.py
  git:
    repo: https://github.com/chmod666org/scaleway-ipmove
    dest: /usr/local/bin/scaleway-ipmove
    force: yes
  environment:
    https_proxy: "http://{{ hostvars[groups['proxy'][0]]['ansible_tun0']['ipv4']['address'] }}:8888"
  when: "'proxy' in group_names"

- name: traefik_ingress_controller | notify.sh
  template:
    src: notify.sh.j2
    dest: /usr/local/bin/scaleway-ipmove/notify.sh
    mode: 0500
    owner: root
    group: root
  when: "'proxy' in group_names"

# this runs keepalived on proxy nodes
- name: traefik_ingress_controller | Templating keepalived on proxy node
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { 'src': 'keepalived.yml.j2', 'dest': '/etc/kubernetes/manifests/keepalived.yml' }
  when:
    - "'proxy' in group_names"
    - groups.proxy|length > 1

# scw command line does not allow you to attach/detach proxy ip

#- name: traefik_ingress_controller | Installing go on proxy node (needed for scw)
#  apt:
#    name: "golang"
#    state: latest
#  when:
#    - "'proxy' in group_names"

#- name: traefik_ingress_controller | Creating GOPATH
#  file:
#    path: /usr/local/share/go
#    state: directory
#  when:
#    - "'proxy' in group_names"

#- name: traefik_ingress_controller | Getting scw
#  command: "/usr/bin/go get -u github.com/scaleway/scaleway-cli/cmd/scw"
#  environment:
#    GOPATH: "/usr/local/share/go"
#    GO15VENDOREXPERIMENT: 1
#  when:
#    - "'proxy' in group_names"

#- name: traefik_ingress_controller | Configuring scw
#  template:
#    src: scwrc.j2
#    dest: /root/.scwrc
#    mode: 0600
#  when:
#    - "'proxy' in group_names"
